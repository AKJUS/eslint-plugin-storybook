/**
 * @fileoverview Named exports should not use the name annotation if it is redundant to the name that would be generated by the export name
 * @author Yann Braga
 */
'use strict'

// @ts-expect-error ts-migrate(2451) FIXME: Cannot redeclare block-scoped variable 'docsUrl'.
const { docsUrl } = require('../utils')
const { isProperty } = require('../utils/ast')
const { CATEGORY_ID } = require('../utils/constants')

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

// @ts-expect-error ts-migrate(2580) FIXME: Cannot find name 'module'. Do you need to install ... Remove this comment to see the full error message
module.exports = {
  meta: {
    type: 'suggestion',
    fixable: 'code', // Or `code` or `whitespace`
    docs: {
      description: 'A story should not have a redundant name property',
      category: CATEGORY_ID.CSF,
      recommended: true,
      recommendedConfig: 'warn',
      url: docsUrl('no-redundant-story-name'), // URL to the documentation page for this rule
    },
    messages: {
      removeRedundantName: 'Remove redundant name',
      storyNameIsRedundant:
        'Named exports should not use the name annotation if it is redundant to the name that would be generated by the export name',
    },
  },

  create(context: any) {
    // variables should be defined here

    //----------------------------------------------------------------------
    // Helpers
    //----------------------------------------------------------------------

    //@TODO use the correct name resolver (equivalent to lodash.startcase used in @storybook/csf)
    const resolveStoryName = (str: any) =>
      str
        .replace(/([A-Z]{1,})/g, ' $1')
        .replace(/(^\w|\s\w)/g, (m: any) => m.toUpperCase())
        .split(' ')
        .filter(Boolean)
        .join(' ')
    // any helper functions should go here or else delete this section

    //----------------------------------------------------------------------
    // Public
    //----------------------------------------------------------------------

    return {
      ExportNamedDeclaration: function (node: any) {
        // if there are specifiers, node.declaration should be null
        if (!node.declaration) return

        const { type } = node.declaration

        if (
          type === 'TSTypeAliasDeclaration' ||
          type === 'TypeAlias' ||
          type === 'TSInterfaceDeclaration' ||
          type === 'InterfaceDeclaration'
        ) {
          return
        }
        const {
          id: identifier,
          init: { properties },
        } = node.declaration.declarations[0]

        if (!properties) {
          return
        }

        const storyNameNode = properties.find(
          (prop) => isProperty(prop) && prop.key.name === 'name'
        )

        if (storyNameNode) {
          const { name } = identifier
          const resolvedStoryName = resolveStoryName(name)

          if (storyNameNode.value.value === resolvedStoryName) {
            context.report({
              node: storyNameNode,
              messageId: 'storyNameIsRedundant',
              suggest: [
                {
                  messageId: 'removeRedundantName',
                  fix: function (fixer: any) {
                    return fixer.remove(storyNameNode)
                  },
                },
              ],
            })
          }
        }
      },
    }
  },
}
