/**
 * @fileoverview Named exports should not use the name annotation if it is redundant to the name that would be generated by the export name
 * @author Yann Braga
 */

import {
  isExpressionStatement,
  isLiteral,
  isIdentifier,
  isObjectExpression,
  isProperty,
  isVariableDeclaration,
} from '../utils/ast'
import { CategoryId } from '../utils/constants'
import { createStorybookRule } from '../utils/create-storybook-rule'

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

export = createStorybookRule({
  name: 'no-redundant-story-name',
  defaultOptions: [],
  meta: {
    type: 'suggestion',
    fixable: 'code',
    hasSuggestions: true,
    docs: {
      description: 'A story should not have a redundant name property',
      categories: [CategoryId.CSF, CategoryId.RECOMMENDED],
      recommended: 'warn',
    },
    messages: {
      removeRedundantName: 'Remove redundant name',
      storyNameIsRedundant:
        'Named exports should not use the name annotation if it is redundant to the name that would be generated by the export name',
    },
    schema: [],
  },

  create(context: any) {
    // variables should be defined here

    //----------------------------------------------------------------------
    // Helpers
    //----------------------------------------------------------------------

    //@TODO use the correct name resolver (equivalent to lodash.startcase used in @storybook/csf)
    const resolveStoryName = (str: any) =>
      str
        .replace(/([A-Z]{1,})/g, ' $1')
        .replace(/(^\w|\s\w)/g, (m: any) => m.toUpperCase())
        .split(' ')
        .filter(Boolean)
        .join(' ')

    //----------------------------------------------------------------------
    // Public
    //----------------------------------------------------------------------

    return {
      // CSF3
      ExportNamedDeclaration: function (node: any) {
        // if there are specifiers, node.declaration should be null
        if (!node.declaration) return

        const decl = node.declaration
        if (isVariableDeclaration(decl)) {
          const { id, init } = decl.declarations[0]
          if (isIdentifier(id) && isObjectExpression(init)) {
            const storyNameNode = init.properties.find(
              (prop) =>
                isProperty(prop) &&
                isIdentifier(prop.key) &&
                (prop.key?.name === 'name' || prop.key?.name === 'storyName')
            )

            if (!storyNameNode) {
              return
            }

            const { name } = id
            const resolvedStoryName = resolveStoryName(name)

            //@ts-ignore
            if (isLiteral(storyNameNode.value) && storyNameNode.value.value === resolvedStoryName) {
              context.report({
                node: storyNameNode,
                messageId: 'storyNameIsRedundant',
                suggest: [
                  {
                    messageId: 'removeRedundantName',
                    fix: function (fixer: any) {
                      return fixer.remove(storyNameNode)
                    },
                  },
                ],
              })
            }
          }
        }
      },
      // CSF2
      AssignmentExpression: function (node: any) {
        if (!isExpressionStatement(node.parent)) return

        const { left, right } = node
        if (isIdentifier(left.property) && left.property.name === 'storyName') {
          const propertyName = left.object.name
          const propertyValue = right.value
          const resolvedStoryName = resolveStoryName(propertyName)

          if (propertyValue === resolvedStoryName) {
            context.report({
              node: node,
              messageId: 'storyNameIsRedundant',
              suggest: [
                {
                  messageId: 'removeRedundantName',
                  fix: function (fixer: any) {
                    return fixer.remove(node)
                  },
                },
              ],
            })
          }
        }
      },
    }
  },
})
